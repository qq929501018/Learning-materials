1、 找出/opt目录下（包括子目录），所有扩展名为php的文件中，文件内容包括" config=www.okgj.com "配置信息的全部文件

	find /opt/ -name "*.php"  -exec grep "config=www.okgj.com" -ls {} \;



2、 运行shell脚本有几种方式？
	三种
	sh 文件名  或者  bash 文件名
	source 文件名   
	./文件名



3、常用于测试网络的命令有哪些？
	1.ping				
	2.tracert 			tracert命令用来跟踪从本机到目的地址所经过的路由
	3.netstat			netstat命令用来查看最近活动的网络（也就是你最近访问了那些网站）
	4.telnet

4、CD-ROM的文件系统是什么类型
	
	ISO9660	
	CD-ROM（Compact Disc Read-Only Memory）即只读光盘，是一种在电脑上使用的光碟。这种光碟只能写入数据一次，信息将永久保存在光碟上，使用时通过光碟驱动器读出信息。CD的格式最初是为音乐的存储和回放设计的，1985年，由SONY和飞利浦制定的黄皮书标准使得这种格式能够适应各种二进制数据。有些CD-ROM既存储音乐，又存储计算机数据，这种CD-ROM的音乐能够被CD播放器播放，计算机数据只能被计算机处理。



5、你认为CPU的使用值在什么范围时是正常的

	cpu占用率在0%--75%之间变化，这个是正常的
	经常在80%以上说明不正常


6、DDOS攻击原理是什么，怎么防范？

	DDOS攻击原理
　　	DDOS攻击的常用方式就是：带宽耗尽型和资源耗尽型。

　　	带宽耗尽型主要是堵塞目标网络的出口，导致带宽消耗不能提供正常的上网服务。例如常见的Smurf攻击、UDP Flood攻击、MStream Flood攻击等。建议：针对此类攻击一般采取的措施就是QoS，在路由器或防火墙上针对此类数据流限制流量，从而保证正常带宽的使用。单纯带宽耗尽型攻击较易被识别，并被丢弃。

　	资源耗尽型是攻击者利用服务器处理缺陷，消耗目标服务器的关键资源，例如CPU、内存等，导致无法提供正常服务。例如常见的Syn Flood攻击、NAPTHA攻击等。资源耗尽型攻击利用系统对正常网络协议处理的缺陷，使系统难于分辨正常流和攻击流，导致防范难度较大，是目前业界最关注的焦点问题，例如方正SynGate产品就是专门防范此类的产品。


	


	从另一个维度进行分类，将DDoS攻击分为：
 
		1.基于流量的 DDoS 攻击：主要现象是服务器上流量太大，导致其与Internet的连接完全饱和。从其他地方ping服务器时，丢包率很高，有时您也会看到非常高的延迟（ping时间值很高）。
		2.基于负载的 DDoS 攻击：主要现象当您遇到基于负载的DDoS时，您会注意到负载平均值异常高（或CPU，RAM或磁盘使用情况，具体取决于您的平台和详细信息）。虽然服务器似乎没有做任何有用的事情，但它非常繁忙。通常，日志中会有大量条目表明异常情况。这通常来自很多不同的地方并且是DDoS，但情况不一定如此。 甚至不需要很多不同的主机。
		3.基于漏洞的 DDoS 攻击：如果您的服务在启动后会非常快速地崩溃，特别是如果您可以在崩溃之前建立请求模式并且请求是非典型的或与预期使用模式不匹配，那么您可能正在体验基于漏洞的DoS。这可以来自只有一个主机（几乎任何类型的互联网连接）或许多主机。
		4.DDoS防御是一种资源对抗的防御，攻击者由于采用的是违法手段获取的失陷主机（肉鸡），所以攻击成本远远小于防御成本，这是攻防不对等的原因。
 
		5.一般认为防御DDoS攻击最有效的方式是使用清洗设备对所有流量进行“清洗”，尽可能的筛去攻击流量，然后将剩余流量给与到应用服务器。但是不是所有的DDoS攻击都适用清洗方法。需要根据不同种类针对性的分析和解决。
	


	如何防范：
	　 　   1、Source-end攻击源端防范
 
　　	        2、Router-based路由器防范

　	   　   3、Target-end目标端防范。
	

	
	 解决方案：
 
		1、关于这个问题，当攻击已经发生时你几乎无能为力。
 
		2、最好的长期解决方案是在互联网上的许多不同位置托管您的服务，这样对于攻击者来说他的DDoS攻击成本会更高。
 
		3、这方面的策略取决于您需要保护的服务; DNS可以使用多个权威名称服务器，具有备份MX记录和邮件交换器的SMTP以及使用循环DNS或多宿主的HTTP进行保护（但是在某段时间内可能会出现一些明显的降级）。
 
		4、负载均衡设备并不是解决此问题的有效方法，因为负载均衡设备本身也会遇到同样的问题并且只会造成瓶颈。
 
		5、IPTables或其他防火墙规则无济于事，因为问题是您的管道已经饱和。 一旦防火墙看到连接，就已经太晚了 ; 您的网站带宽已被消耗。你用连接做什么都没关系; 当传入流量恢复正常时，攻击会缓解或完成。
 
		6、内容分发网络（CDN）以及专业安全与网络性能公司的DDoS清理服务。这将是缓解这些类型的攻击的积极措施，并且在许多不同的地方拥有大量的可用带宽。请注意：要隐藏服务器的IP。



7、如何判断一个服务器应该加内存了？

		用命令vmstat查看si/so的参数是否为0，不为0说明内存短缺。
		我们看Linux，只要不用swap的交换空间，就不用担心自己的内存太少。如果常常 swap用很多，可能你就要考虑加物理内存了。这也是Linux看内存是否够用的标准



8、有一个文件abc，里面有很多重复的行，统计这些重复行的行数呢


    awk '{a[$0]++}END{for(i in a) print a[i],i }' 1.php |sort -rn |uniq -c|sort		



某系统管理员需要每天做一定的重复工作，请按照下列要求，编制一个解决方案：
		a:在下午4:50删除/abc目录下的全部子目录和全部文件；

			50 16 * * * rm -rf /abc/*

 		b:从早8:00-下午6:00每小时读取/xyz目录下x1文件中每行第一个域的全部数据加入到/backup目录下的bak01.txt文件内
			
			0 8-18 * * * awk '{print $1}' > /backup/bak01.txt.`date + \%T`
			
		c:每逢星期一下午5:50将/data目录下的所有目录和文件归档并压缩为文件：backup.tar.gz;
			
			50 17 * * 1  tar -cvf /data  backup.tar.gz

9、如何查看系统运行了多长时间没有重启了？如何查看当前16核至强服务器中每个CPU的使用率
	
	最后一次启动时间	who -b
	查看Linux重启日期	last -x reboot|head -1
	查看Linux关机日期	last -x shutdown|head -1
	查看Linux运行时长	uptime -p 


	top  -d 1
	（此时会显示以1s的频率刷新系统负载显示，可以看到总的CPU的负载情况，以及占CPU最高的进程id，进程名字等信息）
	（切换按下数字1，则可以在显示多个CPU和总CPU中切换）
	之后按下数字1. 则显示多个CPU （top后按1也一样）



10、找出/home/log中包含date关键字的行不区分大小写
		
		find /home/log -type f -exec grep -i "date" {} \;


11、443端口是哪个服务器使用的

	端口：443
		服务：Https
		说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。


12、简述一下OSI七层模型分别是什么？简述以下TCP协议的三次握手

	OSI模型把网络通信的工作分为7层，分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 
	TCP/IP四层网络模型：
		TCP/IP四层网络模型是应用层、传输层、网络层、网络访问层。是对OSI七层网络模型的一个简化。
		应用层->OSI 应用层、表示层、会话层
		传输层->OSI 传输层
		网络层->OSI 网络层
		网络接口层->OSI 数据链路层、物理层
	
	TCP三次握手：
		第一次握手：建立连接时,客户端发送syn包(syn=j)到服务器,并进入SYN_SEND状态,等待服务器确认； 
		SYN：同步序列编号(Synchronize Sequence Numbers)
		第二次握手：服务器收到syn包,必须确认客户的SYN（ack=j+1）,同时自己也发送一个SYN包（syn=k）,即SYN+ACK包,此时服务器进入SYN_RECV状态； 
		第三次握手：客户端收到服务器的SYN＋ACK包,向服务器发送确认包ACK(ack=k+1),此包发送完毕,客户端和服务器进入ESTABLISHED状态,完成三次握手.
		完成三次握手,客户端与服务器开始传送数据


		A与B建立TCP连接时：首先A向B发SYN（同步请求），然后B回复SYN搜索+ACK（同步请求应答），最后A回复ACK确认，这样TCP的一次连接（三次握手）的过程就建立了！


	四次断开及状态：

		

13、Unix/Linux系统上的chmod命令被某人去掉了x属性，怎么恢复

	重新安装  reinstall



14、mysql主从同步的原理是什么？

	MYSQL主从同步原理：
		1） MYSQL主从同步是异步复制的过程，整个同步需要开启3线程，master上开启bin-log日志（记录数据库增、删除、修改、更新操作）；
		2） Slave开启I/O线程来请求master服务器，请求指定bin-log中position点之后的内容；
		3） Master端收到请求，Master端I/O线程响应请求，bin-log、position之后内容返给salve；
		4） Slave将收到的内容存入relay-log中继日志中，生成master.info（记录master ip、bin-log、position、用户名密码）；
		5） Slave端SQL实时监测relay-log日志有更新，解析更新的sql内容，解析成sql语句，再salve库中执行；
		6） 执行完毕之后，Slave端跟master端数据保持一致！
	

	MYSQL主从用途：
		1） MYSQL主从，有主库和从库，内容一般是一致，master/slave；
		2） 假设LAP（Linux+Apache+PHP）+MYSQL（单台），MYSQL属于单点故障，一旦MYSQL宕机，整合网站无法访问；
		3） 为了解决单点问题，引入MYSQL从库，从而保证网站数据库不宕机或者宕机之后能够快速恢复；
		4） MYSQL主从，主库和从库一定保持一致，如何保证主从数据一致？
		5） MYSQL主从架构，可以协助实现数据库读写分离，从而保证网站更加的稳定和可靠；



15、mysql的存储引擎InnoDB和MyISAM的区别是什么？


		InnoDB写的性能略高于MyISAM，
		MyISAM的读的性能远高于InnoDB，如果读的多，建议使用MyISAM
		MyISAM不支持事务



	InnoDB：
		支持事务处理等
		不加锁读取
		支持外键
		支持行锁
		不支持FULLTEXT类型的索引
		不保存表的具体行数，扫描表来计算有多少行
		DELETE 表时，是一行一行的删除
		InnoDB 把数据和索引存放在表空间里面
		跨平台可直接拷贝使用
		InnoDB中必须包含AUTO_INCREMENT类型字段的索引
		表格很难被压缩

	MyISAM：
		不支持事务，回滚将造成不完全回滚，不具有原子性
		不支持外键
		不支持外键
		支持全文搜索
		保存表的具体行数,不带where时，直接返回保存的行数
		DELETE 表时，先drop表，然后重建表
		MyISAM 表被存放在三个文件 。frm 文件存放表格定义。 数据文件是MYD (MYData) 。 索引文件是MYI (MYIndex)引伸
		跨平台很难直接拷贝
		MyISAM中可以使AUTO_INCREMENT类型字段建立联合索引
		表格可以被压缩

	选择：
		因为MyISAM相对简单所以在效率上要优于InnoDB.如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择。且MyISAM恢复速度快。可直接用备份覆盖恢复。
		如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。
		两种类型都有自己优缺点，选择那个完全要看自己的实际类弄。



16、tomcat的优化如何做？
	Tomcat是我们经常使用的 servlet容器之一，甚至很多线上产品都使用 Tomcat充当服务器。而且优化后的Tomcat性能提升显著，本文从以下几方面进行分析优化。

	
	1、tomcat内存优化：

		linux修改TOMCAT_HOME/bin/catalina.sh，在前面加入
JAVA_OPTS="-XX:PermSize=64M -XX:MaxPermSize=128m -Xms512m -Xmx1024m -Duser.timezone=Asia/Shanghai"


	2、tomcat 线程优化:

	3、tomcat组件优化：
		APR插件提高tomcat性能
	
	4、tomcat配置优化：
		1.Connector优化，Connector是连接器，负责接收客户的请求，以及向客户端回送响应的消息。所以 Connector的优化是重要部分。
		2.BIO、NIO、APR，通过配置 protocol的类型可以使用不同的 Connector处理请求
		3.线程池，Executor代表了一个线程池，可以在Tomcat组件之间共享。使用线程池的好处在于减少了创建销毁线程的相关消耗，而且可以提高线程的使用效率。
		4.Listener，另一个影响Tomcat 性能的因素是内存泄露。Server标签中可以配置多个Listener，其中 JreMemoryLeakPreventionListener是用来预防JRE内存泄漏。此Listener只需在Server标签中配置即可，默认情况下无需配置，已经添加在 Server中。
		资料链接：https://www.cnblogs.com/songanwei/p/9441288.html



17、清除了一个大文件，但是磁盘空间使用率一直没有降下来，怎么解决？
		
		解决思路：
		一般说来不会出现删除文件后空间不释放的情况，但是也存在例外，比如文件被进程锁定，或者有进程一直在向这个文件写数据等等，要理解这个问题，就需要知道Linux下文件的存储机制和存储结构。

		一个文件在文件系统中的存放分为两个部分：数据部分和指针部分，指针位于文件系统的meta-data中，数据被删除后，这个指针就从meta-data中清除了，而数据部分存储在磁盘中，数据对应的指针从meta-data中清除后，文件数据部分占用的空间就可以被覆盖并写入新的内容，之所以出现删除access_log文件后，空间还没释放，就是因为httpd进程还在一直向这个文件写入内容，导致虽然删除了access_log文件，但文件对应的指针部分由于进程锁定，并未从meta-data中清除，而由于指针并未被删除，那么系统内核就认为文件并未被删除，因此通过df命令查询空间并未释放也就不足为奇了。
		
		解决方法：
		lsof |grep delete;通过这个命令可以获取一个已经被删除但仍然被应用程序占用的文件列表
		到这里问题就基本排查清楚了，解决这一类问题的方法有很多种，最简单的方法是关闭或者重启httpd进程，当然也可以重启操作系统，不过这并不是最好的方法，对待这种进程不停对文件写日志的操作，要释放文件占用的磁盘空间，最好的方法是在线清空这个文件，可以通过如下命令完成：
		[root@localhost ~]# echo " " >/tmp/acess.log
		通过这种方法，磁盘空间不但可以马上释放，也可保障进程继续向文件写入日志，这种方法经常用于在线清理Apache、Tomcat、Nginx等Web服务产生的日志文件。
	
